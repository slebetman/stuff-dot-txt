#! /usr/bin/env tclsh

package require Tk

set TESTING 1
set TERMINAL [expr {![catch {fconfigure stdout -mode}]}]

proc color {txt c} {
	if {$::TERMINAL || $::argv == "--color"} {
		puts -nonewline "\033\[3${c}m$txt\033\[0m"
	} else {
		puts -nonewline $txt
	}
}

proc test {description script} {
	if {[catch $script]} {
		puts "[color FAIL 1]: $description\n[regsub -lineanchor -all ^ $::errorInfo \t]"
	} else {
		puts "[color PASS 2]: $description"
	}
}

proc assert {r op e} {
	if "\$r $op \$e" return
	
	foreach var {e r} {
		set $var [string map {\n \\n \t \\t} [set $var]]
	}
	error "Expected: \"$e\", Result: \"$r\""
}

proc stringReadChan {cmd args} {
	global txt
	switch -- $cmd {
		read {
			set len [lindex $args 1]
			set ret [string range $txt 0 $len-1]
			set txt [string range $txt $len end]
			return $ret
		}
		initialize {
			return {initialize finalize watch read}
		}
	}
}

proc stringWriteChan {cmd args} {
	global txt
	puts $cmd
	switch -- $cmd {
		write {
			set data [lindex $args 1]
			append txt $data
			puts "> $data"
			puts "< $txt"
			exit
			return [string length $data]
		}
		initialize {
			puts $args
			return {initialize finalize watch write}
		}
	}
}

test "Parsing code" {
	uplevel #0 {source stuff}
}

set stuff {
	{0 {{Title of stuff.txt file}}}
	{1 {{Hello World} {this is a note}}}
	{2 {{Second Note} {this is another note}}}
}

test "Make sure drawStuff draws correct list" {
	drawStuff
	set expected "Hello World\nSecond Note\n\n"
	set result [$::listbox get 0.0 end]
	assert $result == $expected
}

test "Make sure drawStuff draw selected notes correctly" {
	drawStuff {0 2}
	set expected "Second Note\n\n"
	set result [$::listbox get 0.0 end]
	assert $result == $expected
}

test "Make sure readNote draws correct note" {
	readNote 2
	set expected "Second Note\nthis is another note\n"
	set result [$::notebox get 0.0 end]
	assert $result == $expected
}

set testFileContent {
Test Stuff File
________________
First Note
bla

________________

Second Note

bla bla
_____________
Third Note

bla bla bla
__________________
}

test "Make sure parseStuff works as expected" {
	set ::txt $::testFileContent
	set dummyFile [chan create read stringReadChan]	
	parseStuff $dummyFile
	close $dummyFile
	
	set expected {
		{0 {{Test Stuff File}}}
		{1 {{First Note} bla {}}}
		{2 {{Second Note} {} {bla bla}}}
		{3 {{Third Note} {} {bla bla bla}}}
	}
	assert [list {*}$::stuff] == [list {*}$expected]
}

test "drawStuff should work with output of parseStuff" {
	drawStuff
	set expected "First Note\nSecond Note\nThird Note\n\n"
	set result [$::listbox get 0.0 end]
	assert $result == $expected
}

test "readNote should work with output of parseStuff" {
	readNote 2
	set expected "Second Note\n\nbla bla\n"
	set result [$::notebox get 0.0 end]
	assert $result == $expected
}

test "Make sure saveStuff works" {
	global txt
	set txt ""
	set dummyFile [chan create write stringWriteChan]
	saveStuff $dummyFile
	#close $dummyFile
	set expected [regsub -all -lineanchor {^____+$} $::testFileContent [string repeat _ 80]]
	assert $txt == $expected
}

exit
